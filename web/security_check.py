import os
import subprocess
import json
from datetime import datetime

def run_command(command, description):
    print(f"\nüîç {description}...")
    print("=" * 50)
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            if result.stdout:
                print(result.stdout)
        else:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
            if result.stdout:
                print(result.stdout)
            if result.stderr:
                print("–û—à–∏–±–∫–∏:", result.stderr)
                
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def main():
    print("üõ°Ô∏è –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print(f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    checks = [
        {
            "command": "bandit -r . -f txt --severity-level medium",
            "description": "Bandit - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        },
        {
            "command": "bandit -r . -f json -o bandit-report.json",
            "description": "Bandit - —Å–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞"
        },
        {
            "command": "safety check",
            "description": "Safety - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö"
        },
        {
            "command": "safety check --json > safety-report.json",
            "description": "Safety - —Å–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞"
        },
        {
            "command": "flake8 app.py --max-line-length=127",
            "description": "Flake8 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
        }
    ]
    
    results = []
    for check in checks:
        success = run_command(check["command"], check["description"])
        results.append({
            "check": check["description"],
            "status": "PASS" if success else "FAIL"
        })
    
    print("\nüìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)
    
    passed = sum(1 for r in results if r["status"] == "PASS")
    total = len(results)
    
    for result in results:
        status_icon = "‚úÖ" if result["status"] == "PASS" else "‚ùå"
        print(f"{status_icon} {result['check']}: {result['status']}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    summary = {
        "timestamp": datetime.now().isoformat(),
        "app": "Simple Flask Security Demo",
        "total_checks": total,
        "passed_checks": passed,
        "results": results
    }
    
    with open("security-summary.json", "w", encoding="utf-8") as f:
        json.dump(summary, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ security-summary.json")

if __name__ == "__main__":
    main() 