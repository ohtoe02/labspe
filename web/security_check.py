#!/usr/bin/env python3
"""
Security Check Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import json
import os
from datetime import datetime


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*50}")
    print(f"üîç {description}")
    print(f"{'='*50}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Stderr: {result.stderr}")
            
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
        return False, "", str(e)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üõ°Ô∏è  SECURITY CHECK SUITE")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {}
    
    # 1. Bandit Security Check
    print("\n1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Bandit Security Scan...")
    success, stdout, stderr = run_command(
        "bandit -r . -f json -o bandit-report.json",
        "Bandit - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Python –∫–æ–¥–∞"
    )
    results['bandit'] = {'success': success, 'stdout': stdout, 'stderr': stderr}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Bandit –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    run_command("bandit -r . -f txt", "Bandit - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    # 2. Safety Check
    print("\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Safety Check...")
    success, stdout, stderr = run_command(
        "safety check --json --output safety-report.json",
        "Safety - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö"
    )
    results['safety'] = {'success': success, 'stdout': stdout, 'stderr': stderr}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Safety –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    run_command("safety check", "Safety - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    # 3. Flake8 Linting
    print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Flake8...")
    success, stdout, stderr = run_command(
        "flake8 . --count --statistics --max-line-length=127",
        "Flake8 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
    )
    results['flake8'] = {'success': success, 'stdout': stdout, 'stderr': stderr}
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'summary': {
            'bandit': 'PASS' if results['bandit']['success'] else 'FAIL',
            'safety': 'PASS' if results['safety']['success'] else 'FAIL',
            'flake8': 'PASS' if results['flake8']['success'] else 'FAIL'
        },
        'details': results
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    with open('security-summary.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    # 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    total_checks = len(results)
    passed_checks = sum(1 for r in results.values() if r['success'])
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks - passed_checks}/{total_checks}")
    
    for check_name, result in results.items():
        status = "‚úÖ PASS" if result['success'] else "‚ùå FAIL"
        print(f"   {check_name.upper()}: {status}")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
    print("\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("="*60)
    
    recommendations = [
        "1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
        "2. –ó–∞–º–µ–Ω–∏—Ç–µ MD5 –Ω–∞ bcrypt –∏–ª–∏ Argon2 –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π",
        "3. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤",
        "4. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
        "5. –£–¥–∞–ª–∏—Ç–µ debug=True –∏–∑ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        "6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á",
        "7. –î–æ–±–∞–≤—å—Ç–µ rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
        "8. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ]
    
    for rec in recommendations:
        print(f"   {rec}")
    
    print("\n" + "="*60)
    print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
    print("   - bandit-report.json")
    print("   - safety-report.json") 
    print("   - security-summary.json")
    print("="*60)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if passed_checks == total_checks:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 