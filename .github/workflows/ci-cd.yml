name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './ВяткинСЮ/frontend/package-lock.json'
        
    - name: Install Python dependencies
      working-directory: ./ВяткинСЮ/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Install Node.js dependencies
      working-directory: ./ВяткинСЮ/frontend
      run: |
        npm ci
        
    - name: Run Python tests
      working-directory: ./ВяткинСЮ/backend
      run: |
        python -m pytest tests/ -v
        
    - name: Run Node.js tests
      working-directory: ./ВяткинСЮ/frontend
      run: |
        npm test -- --coverage --watchAll=false
        
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./ВяткинСЮ/backend
        push: false
        tags: webapp-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./ВяткинСЮ/frontend
        push: false
        tags: webapp-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Nginx Image
      uses: docker/build-push-action@v5
      with:
        context: ./ВяткинСЮ/nginx
        push: false
        tags: webapp-nginx:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './ВяткинСЮ/frontend/package-lock.json'
        
    - name: Install Python dependencies
      working-directory: ./ВяткинСЮ/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx pytest-cov
        
    - name: Install Node.js dependencies
      working-directory: ./ВяткинСЮ/frontend
      run: |
        npm ci
        
    - name: Run Python tests with coverage
      working-directory: ./ВяткинСЮ/backend
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term
        
    - name: Run JavaScript tests with coverage
      working-directory: ./ВяткинСЮ/frontend
      run: |
        npm test -- --coverage --watchAll=false
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true  # Не блокируем пайплайн при недоступности SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ./ВяткинСЮ
        
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Install Node.js security tools
      run: |
        npm install -g audit-ci retire
        
    - name: Run Python safety check (vulnerabilities in dependencies)
      working-directory: ./ВяткинСЮ/backend
      run: |
        safety check -r requirements.txt --json --output safety-report.json || true
        
    - name: Run Bandit security linter (Python code analysis)
      working-directory: ./ВяткинСЮ/backend
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run NPM audit (Node.js dependencies)
      working-directory: ./ВяткинСЮ/frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        
    - name: Run Retire.js (JavaScript libraries)
      working-directory: ./ВяткинСЮ/frontend
      run: |
        retire --outputformat json --outputpath retire-report.json || true
        
    - name: Run Trivy vulnerability scanner (filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './ВяткинСЮ'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (Docker images)
      working-directory: ./ВяткинСЮ
      run: |
        docker build -t webapp-backend:scan ./backend
        docker build -t webapp-frontend:scan ./frontend
        docker build -t webapp-nginx:scan ./nginx
        trivy image --format json --output backend-image-scan.json webapp-backend:scan || true
        trivy image --format json --output frontend-image-scan.json webapp-frontend:scan || true
        trivy image --format json --output nginx-image-scan.json webapp-nginx:scan || true
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload security reports as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          ./ВяткинСЮ/backend/safety-report.json
          ./ВяткинСЮ/backend/bandit-report.json
          ./ВяткинСЮ/frontend/npm-audit-report.json
          ./ВяткинСЮ/frontend/retire-report.json
          ./ВяткинСЮ/backend-image-scan.json
          ./ВяткинСЮ/frontend-image-scan.json
          ./ВяткинСЮ/nginx-image-scan.json 