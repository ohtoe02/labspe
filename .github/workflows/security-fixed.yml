name: Security Checks (Fixed)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Запуск каждый день в 02:00 UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Find and install dependencies
      run: |
        # Поиск директории с web приложением
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -z "$WEBDIR" ]; then
          echo "Web directory not found, searching for requirements.txt..."
          WEBDIR=$(find . -name "requirements.txt" -exec dirname {} \; | head -1)
        fi
        
        if [ -n "$WEBDIR" ]; then
          echo "Found web directory: $WEBDIR"
          cd "$WEBDIR"
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pylint pip-audit
        else
          echo "No web directory or requirements.txt found, installing security tools only"
          pip install bandit safety flake8 pylint pip-audit
        fi
        
    - name: Run Bandit Security Scan
      run: |
        echo "🔍 Running Bandit security scan..."
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ]; then
          cd "$WEBDIR"
        fi
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
      continue-on-error: true
      
    - name: Run Safety Check
      run: |
        echo "🔍 Running Safety dependency scan..."
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ]; then
          cd "$WEBDIR"
        fi
        safety check --json > safety-report.json 2>/dev/null || true
        safety check || true
      continue-on-error: true
      
    - name: Python Security Check with pip-audit
      run: |
        echo "🔍 Running pip-audit scan..."
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ]; then
          cd "$WEBDIR"
        fi
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || true
      continue-on-error: true
      
    - name: Code Quality Check
      run: |
        echo "🔍 Running code quality checks..."
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ]; then
          cd "$WEBDIR"
        fi
        flake8 . --count --statistics --max-line-length=127 || true
        if [ -f "app.py" ]; then
          pylint --exit-zero --output-format=json app.py > pylint-report.json || true
        fi
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-fixed-${{ github.run_number }}
        path: |
          **/bandit-report.json
          **/safety-report.json
          **/pip-audit-report.json
          **/pylint-report.json
        retention-days: 30
          
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ] && [ -f "$WEBDIR/Dockerfile" ]; then
          cd "$WEBDIR"
          docker build -t security-demo:${{ github.sha }} .
        else
          echo "No Dockerfile found in web directory"
          exit 0
        fi
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-demo:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy for JSON report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-demo:${{ github.sha }}'
        format: 'json'
        output: 'trivy-report.json'
      continue-on-error: true
        
    - name: Upload Trivy JSON report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-report-${{ github.run_number }}
        path: trivy-report.json
        retention-days: 30
        
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        if [ -n "$WEBDIR" ]; then
          echo "Running OWASP Dependency Check on $WEBDIR"
          docker run --rm \
            -v "$(pwd)/$WEBDIR":/src \
            -v "$(pwd)/reports":/reports \
            owasp/dependency-check:latest \
            --scan /src \
            --format ALL \
            --project "Simple Security Demo" \
            --out /reports \
            --enableRetired \
            --enableExperimental || true
        else
          echo "No web directory found for dependency check"
        fi
      continue-on-error: true
        
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report-${{ github.run_number }}
        path: reports/
        retention-days: 30
        
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-analysis, docker-security, secrets-scan, dependency-check]
    if: always()
    
    steps:
    - name: Security Summary Report
      run: |
        echo "# 🛡️ Simple Security Demo - Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Analysis | ${{ needs.security-analysis.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker-security.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Security Tools Used" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit** - Python static security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety** - Python dependency vulnerability checking" >> $GITHUB_STEP_SUMMARY
        echo "- **pip-audit** - Additional dependency scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **Trivy** - Container vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **GitLeaks** - Secret detection" >> $GITHUB_STEP_SUMMARY
        echo "- **OWASP Dependency Check** - Comprehensive dependency analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Generated Reports" >> $GITHUB_STEP_SUMMARY
        echo "Security reports are available in workflow artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ Educational Application Notice" >> $GITHUB_STEP_SUMMARY
        echo "This is a simplified Flask application containing intentional vulnerabilities for security education." >> $GITHUB_STEP_SUMMARY
        echo "Detected issues are expected and demonstrate the effectiveness of security tools." >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [[ "${{ needs.security-analysis.result }}" == "success" && \
              "${{ needs.docker-security.result }}" == "success" && \
              "${{ needs.secrets-scan.result }}" == "success" && \
              "${{ needs.dependency-check.result }}" == "success" ]]; then
          echo "🎉 All security checks passed!" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "⚠️ Some security issues detected. Please review the reports." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 