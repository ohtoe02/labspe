name: Security Checks (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Find and install Python dependencies
      run: |
        # Find all requirements.txt files and install them
        find . -name "requirements.txt" -exec pip install -r {} \;
        # Install security tools
        pip install bandit safety flake8 pylint pip-audit
        
    - name: Run Bandit Security Scan
      run: |
        echo "🔍 Running Bandit security scan..."
        # Find Python files and scan them
        if find . -name "*.py" | head -1 | xargs dirname > /dev/null 2>&1; then
          bandit -r . -f txt --severity-level medium || true
          bandit -r . -f json -o bandit-report.json || true
        else
          echo "No Python files found for Bandit scan"
        fi
      continue-on-error: true
      
    - name: Run Safety Check
      run: |
        echo "🔍 Running Safety dependency scan..."
        safety check || true
        safety check --json > safety-report.json 2>/dev/null || true
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        echo "🔍 Running pip-audit scan..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || true
      continue-on-error: true
      
    - name: Code Quality Check
      run: |
        echo "🔍 Running code quality checks..."
        # Find Python files and check them
        if find . -name "*.py" | head -1 > /dev/null 2>&1; then
          flake8 . --count --statistics --max-line-length=127 || true
          # Find main Python files for pylint
          find . -name "app.py" -o -name "main.py" | head -5 | xargs -I {} pylint --exit-zero {} || true
        else
          echo "No Python files found for quality check"
        fi
      continue-on-error: true
      
    - name: Secret Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-simple-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 15
        
    - name: Security Summary
      if: always()
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Security Tools Executed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Bandit** - Python static security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Safety** - Python dependency vulnerability checking" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **pip-audit** - Additional dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **GitLeaks** - Secret detection in repository" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Flake8** - Code quality and style checking" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Generated Reports" >> $GITHUB_STEP_SUMMARY
        echo "Security reports are available in workflow artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ Note" >> $GITHUB_STEP_SUMMARY
        echo "This is an educational security demo. Detected vulnerabilities are intentional." >> $GITHUB_STEP_SUMMARY 