name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Запуск каждый день в 02:00 UTC
    - cron: '0 2 * * *'

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ВяткинСЮ/web
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Bandit Security Scan
      run: |
        cd ВяткинСЮ/web
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
      continue-on-error: true
      
    - name: Run Safety Check
      run: |
        cd ВяткинСЮ/web
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
      
    - name: Python Security Check with pip-audit
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        requirements: ВяткинСЮ/web/requirements.txt
        output: pip-audit-report.json
        format: json
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          ВяткинСЮ/web/bandit-report.json
          ВяткинСЮ/web/safety-report.json
          pip-audit-report.json
          
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        cd ВяткинСЮ/web
        docker build -t security-demo:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-demo:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Security Demo'
        path: 'ВяткинСЮ/web'
        format: 'ALL'
        
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-report
        path: reports/
        
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        
    - name: Lint with flake8
      run: |
        cd ВяткинСЮ/web
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Analyze with pylint
      run: |
        cd ВяткинСЮ/web
        pylint --exit-zero --output-format=json app.py > pylint-report.json
        pylint app.py
      continue-on-error: true
      
    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          ВяткинСЮ/web/pylint-report.json
          
  notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-analysis, docker-security, secrets-scan, dependency-check, code-quality]
    if: always()
    
    steps:
    - name: Notify on Security Issues
      if: needs.security-analysis.result == 'failure' || needs.docker-security.result == 'failure'
      run: |
        echo "⚠️ Security issues detected! Please review the security reports."
        echo "Security Analysis: ${{ needs.security-analysis.result }}"
        echo "Docker Security: ${{ needs.docker-security.result }}"
        echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo "Dependency Check: ${{ needs.dependency-check.result }}" 