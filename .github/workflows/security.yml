name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Запуск каждый день в 02:00 UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        find . -name "requirements.txt" -path "*/web/*" -exec dirname {} \; | head -1 | xargs -I {} sh -c 'cd "{}" && python -m pip install --upgrade pip && pip install -r requirements.txt && pip install flake8 pylint'
        
    - name: Run Bandit Security Scan
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
      continue-on-error: true
      
    - name: Run Safety Check
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        safety check --json > safety-report.json 2>/dev/null || true
        safety check
      continue-on-error: true
      
    - name: Python Security Check with pip-audit
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        pip install pip-audit
        pip-audit --format=json --output=pip-audit-report.json . || true
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          **/web/bandit-report.json
          **/web/safety-report.json
          **/web/pip-audit-report.json
        retention-days: 30
          
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        docker build -t security-demo:${{ github.sha }} .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-demo:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        docker run --rm \
          -v "$(pwd)/$WEBDIR":/src \
          -v "$(pwd)/reports":/reports \
          owasp/dependency-check:latest \
          --scan /src \
          --format ALL \
          --project "Security Demo" \
          --out /reports \
          --enableRetired \
          --enableExperimental || true
      continue-on-error: true
        
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report-${{ github.run_number }}
        path: reports/
        retention-days: 30
        
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        
    - name: Lint with flake8
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Analyze with pylint
      run: |
        WEBDIR=$(find . -name "web" -type d | head -1)
        cd "$WEBDIR"
        pylint --exit-zero --output-format=json app.py > pylint-report.json
        pylint app.py
      continue-on-error: true
      
    - name: Upload Code Quality Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports-${{ github.run_number }}
        path: |
          **/web/pylint-report.json
        retention-days: 30
          
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-analysis, docker-security, secrets-scan, dependency-check, code-quality]
    if: always()
    
    steps:
    - name: Security Summary Report
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Analysis | ${{ needs.security-analysis.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker-security.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 Security Tools Used" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit** - Python static security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety** - Python dependency vulnerability checking" >> $GITHUB_STEP_SUMMARY
        echo "- **pip-audit** - Additional dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **Trivy** - Container vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **GitLeaks** - Secret detection" >> $GITHUB_STEP_SUMMARY
        echo "- **OWASP Dependency Check** - Comprehensive dependency analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Flake8 & Pylint** - Code quality and style checking" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ Educational Purpose Notice" >> $GITHUB_STEP_SUMMARY
        echo "This application contains intentional vulnerabilities for security testing and education." >> $GITHUB_STEP_SUMMARY
        echo "Detected issues are expected and demonstrate the effectiveness of security tools." >> $GITHUB_STEP_SUMMARY 